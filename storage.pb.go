// Code generated by protoc-gen-gogo.
// source: storage.proto
// DO NOT EDIT!

/*
Package osmtopo is a generated protocol buffer package.

It is generated from these files:
	storage.proto

It has these top-level messages:
	TagEntry
	Node
	Way
	MemberEntry
	Relation
*/
package osmtopo

import proto "github.com/gogo/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type TagEntry struct {
	Key              *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TagEntry) Reset()         { *m = TagEntry{} }
func (m *TagEntry) String() string { return proto.CompactTextString(m) }
func (*TagEntry) ProtoMessage()    {}

func (m *TagEntry) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *TagEntry) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Node struct {
	Id               *int64      `protobuf:"zigzag64,1,req,name=id" json:"id,omitempty"`
	Tags             []*TagEntry `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Lat              *float64    `protobuf:"fixed64,8,req,name=lat" json:"lat,omitempty"`
	Lon              *float64    `protobuf:"fixed64,9,req,name=lon" json:"lon,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}

func (m *Node) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Node) GetTags() []*TagEntry {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Node) GetLat() float64 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

func (m *Node) GetLon() float64 {
	if m != nil && m.Lon != nil {
		return *m.Lon
	}
	return 0
}

type Way struct {
	Id               *int64      `protobuf:"zigzag64,1,req,name=id" json:"id,omitempty"`
	Tags             []*TagEntry `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Refs             []int64     `protobuf:"zigzag64,8,rep,packed,name=refs" json:"refs,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Way) Reset()         { *m = Way{} }
func (m *Way) String() string { return proto.CompactTextString(m) }
func (*Way) ProtoMessage()    {}

func (m *Way) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Way) GetTags() []*TagEntry {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Way) GetRefs() []int64 {
	if m != nil {
		return m.Refs
	}
	return nil
}

type MemberEntry struct {
	Id               *int64  `protobuf:"zigzag64,1,req,name=id" json:"id,omitempty"`
	Type             *int32  `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Role             *string `protobuf:"bytes,3,req,name=role" json:"role,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MemberEntry) Reset()         { *m = MemberEntry{} }
func (m *MemberEntry) String() string { return proto.CompactTextString(m) }
func (*MemberEntry) ProtoMessage()    {}

func (m *MemberEntry) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *MemberEntry) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *MemberEntry) GetRole() string {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return ""
}

type Relation struct {
	Id               *int64         `protobuf:"zigzag64,1,req,name=id" json:"id,omitempty"`
	Tags             []*TagEntry    `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Members          []*MemberEntry `protobuf:"bytes,8,rep,name=members" json:"members,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Relation) Reset()         { *m = Relation{} }
func (m *Relation) String() string { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()    {}

func (m *Relation) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Relation) GetTags() []*TagEntry {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Relation) GetMembers() []*MemberEntry {
	if m != nil {
		return m.Members
	}
	return nil
}

func init() {
}
